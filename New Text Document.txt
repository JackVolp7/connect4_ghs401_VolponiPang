public void playerBlackStrategy(){
        //leave these top 4 lines at the top
        playerBlack = "Titan Uranus";  //put player1 name here
        showText(playerBlack,70,100); //shows your name
        GreenfootImage image1 = new GreenfootImage("black.png"); //sets image to black checker
        String colorInitial = new String("b"); //fills the 2d array grid with this value

        int colToPlace=3;
        ArrayList<Integer> pCols = new ArrayList<Integer>(); 
        int redCounter;
        //replace the following code with your strategy
        //but the second line shows you how to place your checker

        //defense
        //horizontal defence
        for(int r=0;r<grid.length;r++)
        {
            for(int c=0;c<grid[r].length-3;c++)
            {
                if((grid[r][c+3]!=null&&grid[r][c+3].equals("r")) && (grid[r][c+2]!=null&&grid[r][c+2].equals("r"))&&(grid[r][c+1]!=null&&grid[r][c+1].equals("r")))
                {
                    pCols.add(c);
                }
            }
        }
        for(int r=0;r<grid.length;r++)
        {
            for(int c=grid[r].length;c>3;c--)
            {
                if((grid[r][c-3]!=null && grid[r][c-3].equals("r")) && (grid[r][c-2]!=null && grid[r][c-2].equals("r"))&& (grid[r][c-1]!=null && grid[r][c-1].equals("r")))
                {
                    pCols.add(c);
                }
            }
        }
        //vertical defence
        for(int c=0;c<grid[0].length;c++)
        {
            for(int r=0;r<grid.length-3;r++)
            {
                if((grid[r+3][c]!=null && grid[r+3][c].equals("r")) &&(grid[r+2][c]!=null && grid[r+2][c].equals("r")) && (grid[r+1][c]!=null && grid[r+1][c].equals("r")))
                {
                    pCols.add(c);
                }
            }
        }
        for(int c=0;c<grid[0].length;c++)
        {
            for(int r=grid.length;r>3;r--)
            {
                if((grid[r-3][c]!=null && grid[r-3][c].equals("r")) && (grid[r-2][c]!=null 
                    && grid[r-2][c].equals("r"))&& (grid[r-1][c]!=null && grid[r-1][c].equals("r")))
                {
                    pCols.add(c);
                }
            }
        }
        //diagonal defence
        for(int r=0; r<grid.length-3;r++)
        {
            for(int c=0; c<grid[r].length-3;c++)
            {
                if(grid[r+1][c]!=null &&(grid[r+3][c+3]!=null 
                    && grid[r+3][c+3].equals("r")) && (grid[r+2][c+2]!=null && grid[r+2][c+2].equals("r") 
                    && (grid[r+1][c+1]!=null && grid[r+1][c+1].equals("r"))))
                {
                    pCols.add(c);
                }
            }
        }
             for(int r=1;r<grid.length-3;r++)
        {
            for(int c=grid[r].length-1;c>3;c--)
            {
                if(grid[r+1][c]!=null &&(grid[r+3][c-3]!=null 
                    && grid[r+3][c-3].equals("r")) && (grid[r+2][c-2]!=null && grid[r+2][c-2].equals("r") 
                    && (grid[r+1][c-1]!=null && grid[r+1][c-1].equals("r"))))
                {
                    pCols.add(c);
                }
            }
        }
        
        //2-1 defence 
        for(int r=1; r<grid.length-2;r++)
        {
            for(int c=0; c<grid[r].length;c++)
            {
                if((grid[r-1][c]!=null && grid[r-1][c].equals("r"))&&(grid[r+1][c]!=null && grid[r+1][c].equals("r")) && (grid[r+2][c]!=null && grid[r+2][c].equals("r")))
                {
                    pCols.add(c);
                }
            }
        }
        for(int r=2; r<grid.length-1;r++)
        {
            for(int c=0; c<grid[r].length;c++)
            {
                if((grid[r-2][c]!=null && grid[r-2][c].equals("r"))&&(grid[r-1][c]!=null && grid[r-1][c].equals("r")) && (grid[r+1][c]!=null && grid[r+1][c].equals("r")))
                {
                    pCols.add(c);
                }
            }
        }
        //defence ends
        if(pCols.size()>0)
        {
            colToPlace = pCols.get((int)Math.random()*pCols.size());
        }
        else 
        {
            colToPlace=3;
        }
    
        placeCol(colToPlace,colorInitial,image1);  //plays in the specified col and fills the 2D array with the 2nd parameter String

    }